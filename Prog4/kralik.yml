bloom: create
input: p5
comments: 5
vars:
  rabbitColor:
    - zelenou
    - azurovou
    - bílou
    - burgundskou
    - čokoládově hnědou
    - černou
    - červenou
    - fialovou
    - hnědou
    - indigovou
    - levandulovou
    - lososovou
    - meruňkovou
    - modrou
    - nachovou
    - nebesky modrou
    - okrovou
    - oranžovou
    - purpurovou
    - rajčatovou
    - růžovou
    - šedou
    - tmavě hnědou
    - žlutou
  borderColor:
    - zelený
    - azurový
    - bílý
    - burgundský
    - čokoládově hnědý
    - černý
    - červený
    - fialový
    - hnědý
    - indigový
    - levandulový
    - lososový
    - meruňkový
    - modrý
    - nachový
    - nebesky modrý
    - okrový
    - oranžový
    - purpurový
    - rajčatový
    - růžový
    - šedý
    - tmavě hnědý
    - žlutý
questions: >
  ### Želvy a králíci


  Při práci se želvou jsme používali [knihovnu
  p.turtle](https://jan-martinek.github.io/p.turtle/). Jde o jednu z mnoha
  dostupných knihoven, které modelují chování želvy, které můžete dávat příkazy.


  V následujícím příkladu potkáte místo želvy králíka, kterému nedáváte příkazy,
  ale můžete ho ovládat přímo (šipkami vlevo a vpravo). Jde o jednoduchou hru:
  králík nesmí narazit do stěny a do své vlastní stopy. Nejspíše jste se s
  podobným herním principem už setkali.


  V kódu vidíte skutečně celou hru — hra má definovaný stav (to znamená popis
  toho, jaká je aktuální situace) a způsob, jak v ní dochází ke změnám (vše se
  odehrává ve funkci `draw()`, kterou hra opakovaně volá — 30krát za sekundu). K
  některým konceptům se dostaneme níže (především k vektorům), ale můžete si kód
  projít, zkusit jej měnit a sledovat, co se stane.


  > **Pozn.:** Všimněte si klíčového slova `this` — v rámci Javascriptu jde o
  podstatný koncept, nicméně pro účely tohoto úkolu není až tak podstatné jej
  pojmout. Pokud vás to zaujalo, najděte si více pomocí vyhledávače.


  ### Zadání úkolu


  Projděte si kód a změňte ho tak,


  - aby králík zanechával %rabbitColor% stopu,

  - aby herní pole mělo %borderColor% okraj,

  - aby králík začínal vždy uprostřed herního pole,

  - a aby hra komunikovala česky nebo slovensky.


  Úpravy popište do pole pro komentáře.


  Následně udělejte screenshot, kde je vidět pěkně zakroucená králíkova stopa s
  několika zatáčkami a kde máte skóre větší než 2000 bodů. Ten odevzdejte v
  následující úloze. **Pro dosažení výsledků, které potřebujete pro screenshot,
  můžete zasahovat do kódu. Nemůžete ale použít nástroje pro úpravu obrázků.**
rubrics:
  - checklist: ''
    items:
      - Barvy jsou správně upraveny.
      - Králík začíná uprostřed pole.
      - Hra komunikuje česky nebo slovensky.
      - Úpravy jsou popsané v komentáři.
prefill: |
  var rabbit, gameOver, score,
    size = toy.measure();

  p.setup = function() { // úvodní nastavení/reset
    rabbit = new Rabbit(
      100, 100, 'red', 
      p.LEFT_ARROW, p.RIGHT_ARROW
    );
    
    score = 0;
    gameOver = false;
    
    p.createCanvas(size.w, size.h);
    p.background(255);
    p.stroke('black');
    p.strokeWeight(2);
    p.rect(1, 1, size.w - 2, size.h - 2);
  };

  p.draw = function() { // překreslení
    if (gameOver) {
    showGameOver();
    } else {
      rabbit.update();
      checkGameOver();
      rabbit.render();
      
      score = score + 1;
      showScore(score);
    }
  };

  p.mouseClicked = function() {
    p.setup(); //restart
  };

  var Rabbit = function(x, y, color, left, right) {
    this.x = x;
    this.y = y;
    
    var dir = new p.createVector(1, 0);
    var speed = 3; 
    var steering = 1;

    this.update = function() {
      this.steer();
      this.move();
    };
    
    this.steer = function(s) {
      if (p.keyIsDown(left)) 
         dir.rotate(steering * -0.1);
      if (p.keyIsDown(right))
         dir.rotate(steering * 0.1);
    };
    
    this.move = function() {
      this.x = this.x + speed * dir.x;
      this.y = this.y + speed * dir.y;
    };  
      
    this.render = function() {
      p.stroke(color);
      p.strokeWeight(speed);
      p.line(
        this.x, this.y, 
        this.x - speed * dir.x, 
        this.y - speed * dir.y
      );  
    };  
  };

  var checkGameOver = function() {
    // získá barvu pixelu, kde je zrovna želva
    var bg = p.get(
      Math.round(rabbit.x),
      Math.round(rabbit.y)
    );
    
    // pokud barva není bílá, hra končí
    if (bg[0]+bg[1]+bg[2] != 3*255) {
      gameOver = true;
    }
  };

  var showGameOver = function() {
    var pos = {
      x: p.random(-150, size.w),
      y: p.random(-150, size.h)
    };
    
    p.noStroke();
    p.fill('red');
   
    p.text('game over, click to play', pos.x, pos.y);
  };

  var showScore = function(score) {
    p.fill('lightgray');
    p.noStroke();
    p.rect(2, 2, 110, 30);
    
    p.fill('black');
    p.text('score: ' + score, 10, 20);
  };
